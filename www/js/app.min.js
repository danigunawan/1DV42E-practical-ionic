// Ionic Starter App

// angular.module is a global place for creating, registering and retrieving Angular modules
// 'starter' is the name of this angular module example (also set in a <body> attribute in index.html)
// the 2nd parameter is an array of 'requires'
// 'starter.controllers' is found in controllers.js

const BookingSystem = angular
  .module( 'BookingSystem', [
    'ionic',
    'BookingSystem.controllers',
    'BookingSystem.furnituring',
    'BookingSystem.furnituringServices',
    'ngMaterial',
    'ngResource'
  ] );

BookingSystem.run( ['$ionicPlatform', ( $ionicPlatform ) => {
  $ionicPlatform.ready( () => {
    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
    // for form inputs)
    if ( window.cordova && window.cordova.plugins.Keyboard ) {
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar( true );
      cordova.plugins.Keyboard.disableScroll( true );

    }
    if ( window.StatusBar ) {
      // org.apache.cordova.statusbar required
      StatusBar.styleDefault();
    }
  });
}] );

// Constants
// BookingSystem.constant( 'API_URL', 'http://www.pesola.se:8080/BookingSystem/api/' );
BookingSystem.constant( 'API_URL', 'http://192.168.1.4:8080/BookingSystem/api/' );
BookingSystem.constant( 'DEFAULT_MAP_ZOOM', 5 );
BookingSystem.constant( 'DEFAULT_LATITUDE', 59.2792 );
BookingSystem.constant( 'DEFAULT_LONGITUDE', 15.2361 );
BookingSystem.constant( 'MODAL_ANIMATION', 'slide-in-up' );

// Routes
BookingSystem.config( ['$stateProvider', '$urlRouterProvider', ( $stateProvider, $urlRouterProvider ) => {
  $stateProvider

  .state( 'app', {
    url: '/app',
    abstract: true,
    templateUrl: 'templates/menu.html',
    controller: 'AppCtrl'
  })

  .state( 'app.start', {
    url: '/start',
    views: {
      'menuContent': {
        templateUrl: 'templates/start.html'
      }
    }
  })

  // Furniturings

  .state( 'app.furnituring-list', {
    url: '/furnituring-list',
    views: {
      'menuContent': {
        templateUrl: 'templates/furnituring/furnituring-list.html',
        controller: 'FurnituringListCtrl'
      }
    }
  })

  .state( 'app.furnituring-details', {
    url: '/furnituring-details/:furnituringId',
    views: {
      'menuContent': {
        templateUrl: 'templates/furnituring/furnituring-details.html',
        controller: 'FurnituringDetailsCtrl'
      }
    }
  })

  .state( 'app.furnituring-create', {
    url: '/furnituring-create',
    views: {
      'menuContent': {
        templateUrl: 'templates/furnituring/furnituring-create.html',
        controller: 'FurnituringCreateCtrl'
      }
    }
  });

  // Old states below
  /*
  .state( 'app.search', {
    url: '/search',
    views: {
      'menuContent': {
        templateUrl: 'templates/search.html'
      }
    }
  })

  .state( 'app.browse', {
    url: '/browse',
    views: {
      'menuContent': {
        templateUrl: 'templates/browse.html'
      }
    }
  })
  .state( 'app.playlists', {
    url: '/playlists',
    views: {
      'menuContent': {
        templateUrl: 'templates/playlists.html',
        controller: 'PlaylistsCtrl'
      }
    }
  })
  .state( 'app.single', {
    url: '/playlists/:playlistId',
    views: {
      'menuContent': {
        templateUrl: 'templates/playlist.html',
        controller: 'PlaylistCtrl'
      }
    }
  });
  */

  // if none of the above states are matched, use this as the fallback
  $urlRouterProvider.otherwise( '/app/start' );
}] );

/**
 * Created by jopes on 2015-04-12.
 */

  // Declare module
  angular.module( 'BookingSystem.furnituringServices',

    // Dependencies
    [
      'ngResource'
    ]
  )

    .factory( 'Furnituring', [ '$resource', 'API_URL', ( $resource, API_URL ) => {

      return $resource(
        API_URL + 'Furnituring/:furnituringId',
        {furnituringId: '@furnituringId'}
      );
    }]
    )

    .factory( 'LocationFurnituring', ['$resource', 'API_URL', ( $resource, API_URL ) => {

      return $resource(
        API_URL + 'LocationFurnituring/:locationId',
        {locationId: '@locationId'}, //furnituringId: '@furnituringId'
        {
          // Override delete, needs 2 id:s. Backend is a relational database table.
          remove: {
            url: API_URL + 'LocationFurnituring/:locationId/:furnituringId',
            id: '@id',
            method: 'DELETE',
            isArray: false,
            params: {
              locationId: '@locationId',
              furnituringId: '@furnituringId'
            }
          },

          // Delete all furniturings for specific location
          removeForLocation: {
            url: API_URL + 'LocationFurnituring/:locationId',
            id: '@id',
            method: 'DELETE',
            isArray: false,
            params: {
              locationId: '@locationId'
            }
          },

          // Get location furniturings for location
          queryForLocation: {
            url: API_URL + 'LocationFurnituring/location/:locationId',
            id: '@id',
            method: 'GET',
            isArray: true,
            params: {
              locationId: '@locationId'
            }
          },

          // POST location furniturings for location
          saveForLocation: {
            url: API_URL + 'LocationFurnituring/location',
            id: '@id',
            method: 'POST',
            isArray: true
          }
        }
      );
    }]
    );

angular.module( 'BookingSystem.controllers', [] )

.controller( 'AppCtrl', ['$scope', '$ionicModal', '$timeout', ( $scope, $ionicModal, $timeout ) => {

  // With the new view caching in Ionic, Controllers are only called
  // when they are recreated or on app start, instead of every page change.
  // To listen for when this page is active (for example, to refresh data),
  // listen for the $ionicView.enter event:
  //$scope.$on('$ionicView.enter', function(e) {
  //});

  // Form data for the login modal
  $scope.loginData = {};

  // Create the login modal that we will use later
  $ionicModal.fromTemplateUrl( 'templates/login.html', {
    scope: $scope
  }).then( ( modal ) => {
    $scope.modal = modal;
  });

  // Triggered in the login modal to close it
  $scope.closeLogin = function() {
    $scope.modal.hide();
  };

  // Open the login modal
  $scope.login = function() {
    $scope.modal.show();
  };

  // Perform the login action when the user submits the login form
  $scope.doLogin = function() {

    console.log( 'Doing login', $scope.loginData );

    // Simulate a login delay. Remove this and replace with your login
    // code if using a login system
    $timeout( () => {
      $scope.closeLogin();
    }, 1000 );
  };
}] )

.controller( 'PlaylistsCtrl', ['$scope', ( $scope ) => {
  $scope.playlists = [
    { title: 'Reggae', id: 1 },
    { title: 'Chill', id: 2 },
    { title: 'Dubstep', id: 3 },
    { title: 'Indie', id: 4 },
    { title: 'Rap', id: 5 },
    { title: 'Cowbell', id: 6 }
  ];
}] )

.controller( 'PlaylistCtrl', ['$scope', '$stateParams', ( $scope, $stateParams ) => {
}] );

'use strict';

angular.module( 'BookingSystem.furnituring',

    // Dependencies
    []
    )

    // Controller
    .controller( 'FurnituringListCtrl', [ '$rootScope', '$scope', '$state', 'Furnituring', ( $rootScope, $scope, $state, Furnituring ) => {

      /* Init vars */

      /* Private methods START */

      const getFurniturings = function () {

        const furniturings = Furnituring.query();

        // In case furnituring cannot be fetched, display an error to user.
        furniturings.$promise.catch( () => {

          $rootScope.FlashMessage = {
            type: 'error',
            message: 'Möbleringar kunde inte hämtas, var god försök igen.'
          };
        });

        $scope.furniturings = furniturings;

      };

      /* Private Methods END */

      /* Public Methods START */

      /* Public Methods END */

      /* Initialization START */
      $scope.$on( '$ionicView.enter', ( event, data ) => {
        getFurniturings();
      });

      /* Initialization END */

    }]
    )

    .controller( 'FurnituringDetailsCtrl', [ '$rootScope', '$scope', '$stateParams', 'MODAL_ANIMATION', '$state', '$ionicModal', 'Furnituring', ( $rootScope, $scope, $stateParams, MODAL_ANIMATION, $state, $ionicModal, Furnituring ) => {

      /* Init vars */
      const modelTemplateUrl = 'templates/modals/furnituring-delete.html';
      $scope.editMode = false;
      $scope.furnituringBackup = {};

      /* Private methods START */
      const setupModal = function(){

        $ionicModal.fromTemplateUrl( modelTemplateUrl, {
          scope: $scope,
          animation: MODAL_ANIMATION
        })
          .then( ( response ) => {

            $scope.modal = response;
          });

        // Cleanup the modal when we're done with it!
        $scope.$on( '$destroy', () => {
          $scope.modal.remove();
        });

        // Execute action on hide modal
        // $scope.$on( 'modal.hidden', () => {
          // Execute action
        // });

        // Execute action on remove modal
        // $scope.$on( 'modal.removed', () => {
          // Execute action
        // });
      };

      const getFurnituring = function () {

        const furnituring = Furnituring.get(
          {
            furnituringId: $stateParams.furnituringId
          }
        );

        // In case furnituring cannot be fetched, display an error to user.
        furnituring.$promise.catch( () => {

          $rootScope.FlashMessage = {
            type: 'error',
            message: 'Möblering kunde inte hämtas, var god försök igen.'
          };
        });

        $scope.furnituring = furnituring;
      };

      /* Private Methods END */

      /* Public Methods START */

      $scope.startEditMode = function () {
        const $scope = this;

        $scope.isEditMode = true;

        // Make backup of data if in editMode.
        $scope.furnituringBackup = angular.copy( $scope.furnituring );
      };

      $scope.endEditMode = function () {
        const $scope = this;

        $scope.isEditMode = false;
      };

      $scope.abortEditMode = function() {
        const $scope = this;

        $scope.isEditMode = false;
        $scope.furnituring = $scope.furnituringBackup;
      };

      $scope.saveFurnituring = function() {

        const $scope = this;

        // Save furnituring
        Furnituring.save(
          {
            FurnituringId: $stateParams.furnituringId,
            Name: $scope.furnituring.Name
          }
        ).$promise

          // If everything went ok
          .then( ( response ) => {

            $scope.endEditMode();

            $rootScope.FlashMessage = {
              type: 'success',
              message: 'Möbleringen "' + $scope.furnituring.Name + '" sparades med ett lyckat resultat'
            };

            // Something went wrong
          }).catch( ( response ) => {

            // If there there was a foreign key reference
            if ( response.status === 409 ){
              $rootScope.FlashMessage = {
                type: 'error',
                message: 'Det finns redan en möblering som heter "' + $scope.furnituring.Name +
                '". Två möbleringar kan inte heta lika.'
              };
            }

            // If there was a problem with the in-data
            else if ( response.status === 400 || response.status === 500 ){
              $rootScope.FlashMessage = {
                type: 'error',
                message: 'Ett oväntat fel uppstod när möbleringen skulle sparas'
              };
            }

            // If the entry was not found
            if ( response.status === 404 ) {
              $rootScope.FlashMessage = {
                type: 'error',
                message: 'Möbleringen "' + $scope.furnituring.Name + '" existerar inte längre. Hann kanske någon radera den?'
              };

              history.back();
            }
          });
      };

      $scope.deleteFurnituring = function() {

        // Delete furnituring
        Furnituring.delete(
          {
            furnituringId: $stateParams.furnituringId
          }
        ).$promise

          // If everything went ok
          .then( ( response ) => {

            $rootScope.FlashMessage = {
              type: 'success',
              message: 'Möbleringen "' + $scope.furnituring.Name + '" raderades med ett lyckat resultat'
            };

            history.back();
          })
          // Something went wrong
          .catch( ( response ) => {

            // If there there was a foreign key reference
            if (
              response.status === 400 &&
              response.data.Message !== 'undefined' &&
              response.data.Message === 'Foreign key references exists'
            ){
              $rootScope.FlashMessage = {
                type: 'error',
                message:    'Möbleringen kan inte raderas eftersom det finns' +
                ' en lokalbokning eller en lokalmöblering som refererar till möbleringen'
              };
            }

            // If there was a problem with the in-data
            else if ( response.status === 400 || response.status === 500 ){
              $rootScope.FlashMessage = {
                type: 'error',
                message: 'Ett oväntat fel uppstod när möbleringen skulle tas bort'
              };
            }

            // If the entry was not found
            if ( response.status === 404 ) {
              $rootScope.FlashMessage = {
                type: 'error',
                message: 'Möbleringen "' + $scope.furnituring.Name + '" existerar inte längre. Hann kanske någon radera den?'
              };
            }

            history.back();
          });
      };

      /* Public Methods END */

      /* Initialization START */

      setupModal();
      getFurnituring();

      /* Initialization END */

    }]
    )

    .controller( 'FurnituringCreateCtrl', [ '$rootScope', '$stateParams', '$scope', '$state', 'Furnituring', ( $rootScope, $stateParams, $scope, $state, Furnituring ) => {

      /* Init vars */
      $scope.furnituring = {};

      /* Private methods START */

      /* Private Methods END */

      /* Public Methods START */

      $scope.saveFurnituring = function() {

        const $scope = this;

        // Save furnituring
        Furnituring.save(
          {
            FurnituringId: 0,
            Name: $scope.furnituring.Name
          }
        ).$promise

          // If everything went ok
          .then( ( response ) => {

            $rootScope.FlashMessage = {
              type: 'success',
              message: 'Möbleringen "' + $scope.furnituring.Name + '" skapades med ett lyckat resultat'
            };

            history.back();

            // Something went wrong
          }).catch( ( response ) => {

            // If there there was a foreign key reference
            if ( response.status === 409 ){
              $rootScope.FlashMessage = {
                type: 'error',
                message: 'Det finns redan en möblering som heter "' + $scope.furnituring.Name +
                '". Två möbleringar kan inte heta lika.'
              };
            }

            // If there was a problem with the in-data
            else {
              $rootScope.FlashMessage = {
                type: 'error',
                message: 'Ett oväntat fel uppstod när möbleringen skulle sparas'
              };
            }
          });
      };

      /* Public Methods END */

      /* Initialization START */

      /* Initialization END */

    }]
    );